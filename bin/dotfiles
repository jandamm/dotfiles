#!/usr/bin/env bash

set -e

# Helper functions {{{

function quit_setup() {
	echo "Usage:"
	echo "  dotfile-setup 'mode'"
	echo "Modes: install & update"
	exit 1
}

mode=-1

function should_install() {
	[ $mode -eq 0 ]
}

function should_update() {
	[ $mode -eq 1 ]
}

function should_execute() {
	[ $mode -ge 0 ]
}

function set_mode() {
	[ $mode -eq -1 ] || quit_setup
	mode=$1
}

# }}}

case $1 in
	install)
		set_mode 0;;
	update)
		set_mode 1;;
esac
shift

should_execute || quit_setup

# Setup environment {{{

if [ -z "$DOTFILES" ]
then
	echo "Not yet set up. Sourcing zprofile"
	# shellcheck source=../zprofile
	source "$(pwd)/${0%/*}/../zprofile"
fi

cd "$DOTFILES" || exit

# Install homebrew if not available
if ! hash brew &>/dev/null; then
	echo 'Install homebrew before continuing with this setup.'
	#shellcheck disable=SC2016
	echo '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
	exit 1
fi

# put every dotfile in place
if should_install; then
	# Install rcm via brew, if not installed.
	if ! hash rcup &>/dev/null; then
		echo 'Installing brew thoughtbot/formulae/rcm'
		brew install thoughtbot/formulae/rcm
	fi
	env RCRC="$DOTFILES/rcrc" rcup
fi

# }}}


# INSTALLATION

# Install brews {{{

function brew_install() {
	if [ -f "$1" ]
	then
		echo "$2"
		brew bundle install --file "$1"
	fi
}

if should_execute; then
	brew_install "$DOTFILES/Brewfile" 'Installing brews'
	brew_install "$DOTFILES_PRIVATE/Brewfile" 'Installing private brews'
fi

# uninstall git completions as zsh completions are way better!
rm /usr/local/share/zsh/site-functions/_git 2>/dev/null || true

# }}}

# Install gems {{{

if should_install
then
	echo "Installing missing ruby with rbenv"
	# installs ruby version in ~/.ruby-version
	rbenv install --skip-existing

	echo 'Installing gems'
	bundle install
fi

if should_update; then
	echo 'Updating gems'
	bundle update
fi

rbenv rehash

# }}}

# Install npms {{{

if should_install || should_update; then
	echo 'Installing npms'
	#shellcheck disable=SC2046
	npm install --global $(command cat "$DOTFILES/node_modules")
fi
if should_update; then
	echo 'Updating npms'
	#shellcheck disable=SC2046
	npm update --global $(command cat "$DOTFILES/node_modules")
fi

# }}}

# Install pips {{{

if should_install; then
	echo 'Installing pips'
	pip3 install -r "$DOTFILES/pip3-requirements"
fi
if should_update; then
	echo 'Updating pips'
	pip3 install -U -r "$DOTFILES/pip3-requirements"
fi

# }}}


# CONFIGURATION

# ALACRITTY {{{

if should_install; then
	# Set font rendering for non retina
	defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
fi

# }}}

# BAT {{{

if should_install || should_update; then
	# recompile with theme
	bat cache --build
fi

# }}}

# NVIM {{{

if should_install; then
	mkdir -p "$DOTFILES_CACHE/vim/undodir"

	if [ ! -d "$HOME/.vim/pack/packager/opt/vim-packager" ]
	then
		git clone https://github.com/kristijanhusak/vim-packager "$HOME/.vim/pack/packager/opt/vim-packager"
	fi

	echo 'Installing vim plugins'
	nvim -u vim/plugins.vim '+call packager#install()' +qa

	for file in vim/spell/*.add; do
		echo 'Compiling vim Spellfiles'
		nvim "+mkspell! $file" +qa
	done
fi

if should_update; then
	echo 'Updating vim plugins'
	nvim -u vim/plugins.vim '+call packager#update()' +qa
fi

# }}}

# TMUX {{{

# install tmux terminal
if should_install; then
	if [[ ! -x  "$DOTFILES_CACHE/tmux/plugins/tpm/tpm" ]]; then
		echo 'Installing tpm'
		git clone https://github.com/tmux-plugins/tpm "$DOTFILES_CACHE/tmux/plugins/tpm"
	fi

	echo 'Installing tmux plugins'
	"$DOTFILES_CACHE"/tmux/plugins/tpm/bin/install_plugins
fi
if should_update; then
	echo 'Updating tmux plugins'
	"$DOTFILES_CACHE"/tmux/plugins/tpm/bin/update_plugins all
fi

# }}}

# ZSH {{{

if should_install; then
	mkdir "$HOME/.cache/zsh"

	echo 'Installing zsh plugins'
	zsh -c "source $DOTFILES/zinit/zinit.zsh && zinit module build"
fi
if should_update; then
	echo 'Updating zinit'
	cd "$DOTFILES/zinit"
	git checkout master
	git pull
	cd "$DOTFILES"

	echo 'Updating zsh plugins'
	zsh -c "source $DOTFILES/zsh/zinit.zsh && zinit update"
fi

# }}}

rcup

# vim:set foldmethod=marker:
