#!/bin/bash

set -e

# Possible configurations {{{

all_config=( brew gem npm pip alacritty bat nvim tmux zsh )

if [ "$1" = "--list" ]
then
	echo "${all_config[*]}"
	exit
fi

# }}}

# Helper functions {{{

function quit_setup() {
	[ -n "$1" ] && echo "Unknown Config: $1"
	echo "Usage:"
	echo "  dotfile-setup 'mode'"
	echo "Modes: install & update"
	echo "Configurations (optional):"
	echo "${all_config[*]}"
	exit 1
}

mode=-1

function is_install() {
	[ $mode -eq 0 ]
}

function is_update() {
	[ $mode -eq 1 ]
}

function should_configure() {
	has_config "$1" && printf '\n==================== %s ====================\n' "$1"
}

function has_mode() {
	[ $mode -ge 0 ]
}

function set_mode() {
	[ $mode -eq -1 ] || quit_setup
	mode=$1
}

config=()

function set_config() {
	config+=("$1")
}

function has_config() {
	has_all_config || [[ " ${config[*]} " = *" ${1} "* ]]
}

function has_all_config() {
	[ ${#config[@]} -eq 0 ]
}

# }}}

while [ -n "$1" ]
do
	case "$1" in
		install)
			set_mode 0;;
		update)
			set_mode 1;;
		*)
			has_mode || quit_setup
			[[ " ${all_config[*]} " = *" ${1} "* ]] || quit_setup "$1"
			set_config "$1";;
	esac
	shift
done

has_mode || quit_setup

# Setup environment {{{

if [ -z "$DOTFILES" ]
then
	echo "Not yet set up. Sourcing zprofile"
	# shellcheck source=../zprofile
	source "$(pwd)/${0%/*}/../zprofile"
fi

cd "$DOTFILES" || exit

# Install homebrew if not available
if ! hash brew &>/dev/null; then
	url='https://raw.githubusercontent.com/Homebrew/install/master/install.sh'
	echo 'Install homebrew before continuing with this setup.'
	echo "Do you wish to install brew now? ($url)"
	read -rp "(y/n): " yn
	case ${yn^^} in
		Y) /bin/bash -c "$(curl -fsSL $url)";;
		*) exit 1;;
	esac
fi

# put every dotfile in place
if is_install
then
	# Install rcm via brew, if not installed.
	if ! hash rcup &>/dev/null; then
		echo 'Installing brew thoughtbot/formulae/rcm'
		brew install thoughtbot/formulae/rcm
	fi
	env RCRC="$DOTFILES/rcrc" rcup
fi

# }}}


# INSTALLATION

# Install brews {{{

function brew_install() {
	if [ -f "$1" ]
	then
		echo "$2"
		brew bundle install --file "$1"
	fi
}

if should_configure brew
then
	brew_install "$DOTFILES/Brewfile" 'Installing brews'
	brew_install "$DOTFILES_PRIVATE/Brewfile" 'Installing private brews'
	brew cleanup
fi

# uninstall git completions as zsh completions are way better!
rm /usr/local/share/zsh/site-functions/_git 2>/dev/null || true

# }}}

# Install gems {{{

if should_configure gem
then
	if is_install
	then
		echo "Installing missing ruby with rbenv"
		# installs ruby version in ~/.ruby-version
		rbenv install --skip-existing

		echo 'Installing gems'
		bundle install
	fi

	if is_update
	then
		echo 'Updating gems'
		bundle update
	fi
fi

rbenv rehash

# }}}

# Install npms {{{

if should_configure npm
then
	echo 'Installing npms'
	#shellcheck disable=SC2046
	npm install --global $(command cat "$DOTFILES/node_modules")

	if is_update
	then
		echo 'Updating npms'
		#shellcheck disable=SC2046
		npm update --global $(command cat "$DOTFILES/node_modules")
	fi
fi

# }}}

# Install pips {{{

if should_configure pip
then
	if is_install
	then
		echo 'Installing pips'
		pip3 install -r "$DOTFILES/pip3-requirements"
	fi

	if is_update
	then
		echo 'Updating pips'
		pip3 install -U -r "$DOTFILES/pip3-requirements"
	fi
fi

# }}}


# CONFIGURATION

# ALACRITTY {{{

if is_install && should_configure alacritty
then
	# Set font rendering for non retina
	defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
fi

# }}}

# BAT {{{

if should_configure bat
then
	# recompile with theme
	bat cache --build
fi

# }}}

# NVIM {{{

if should_configure nvim
then
	nvim_update_file="$(mktemp)"
	trap 'rm "$nvim_update_file"' EXIT

	if is_install
	then
		mkdir -p "$HOME/.vim/undodir"

		if [ ! -d "$HOME/.vim/pack/packager/opt/vim-packager" ]
		then
			git clone https://github.com/kristijanhusak/vim-packager "$HOME/.vim/pack/packager/opt/vim-packager"
		fi

		echo 'Installing vim plugins'
		nvim --headless --noplugin -u vim/plugins.vim "$nvim_update_file" "+call packager#install({ 'on_finish': \"source $DOTFILES/scripts/print_update.vim\" })" &>/dev/null

		for file in vim/spell/*.add; do
			echo 'Compiling vim Spellfiles'
			nvim "+mkspell! $file" +qa
		done
	fi

	if is_update
	then
		echo 'Updating vim plugins'
		nvim --headless --noplugin -u vim/plugins.vim "$nvim_update_file" "+call packager#update({ 'on_finish': \"source $DOTFILES/scripts/print_update.vim\" })" &>/dev/null
	fi

	cat "$nvim_update_file"

	echo 'Updating vim-pack tags'
	neovim-packtags
fi

# }}}

# TMUX {{{

if should_configure tmux
then
	# install tmux terminal
	if is_install
	then
		if [[ ! -x  "$XDG_CACHE_HOME/tmux/plugins/tpm/tpm" ]]; then
			echo 'Installing tpm'
			git clone https://github.com/tmux-plugins/tpm "$XDG_CACHE_HOME/tmux/plugins/tpm"
		fi

		echo 'Installing tmux plugins'
		"$XDG_CACHE_HOME"/tmux/plugins/tpm/bin/install_plugins
	fi

	if is_update
	then
		echo 'Updating tmux plugins'
		"$XDG_CACHE_HOME"/tmux/plugins/tpm/bin/update_plugins all
	fi
fi

# }}}

# ZSH {{{

if should_configure zsh
then
	if is_install
	then
		mkdir -p "$HOME/.cache/zsh"

		echo 'Installing zsh plugins'
		zsh -c "source $DOTFILES/zinit/zinit.zsh && zinit module build"
	fi

	if is_update
	then
		echo 'Updating zinit'
		cd "$DOTFILES/zinit"
		git checkout master
		git pull
		cd "$DOTFILES"

		echo 'Updating zsh plugins'
		zsh -c "source $DOTFILES/zsh/zinit.zsh && zinit update"
	fi
fi

# }}}

if has_all_config
then
	echo 'Putting files into place'
	rcup
fi

if is_install
then
	echo 'Do you want to use zsh from homebrew as your default shell?'
	read -rp "(y/n): " yn
	if [ "${yn^^}" = 'Y' ]
	then
		sudo sh -c 'echo "/usr/local/bin/zsh" >> /etc/shells'
		chsh -s /usr/local/bin/zsh
	fi
fi

# vim:set foldmethod=marker:
