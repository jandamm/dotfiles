#!/usr/bin/env bash

set -e

# Helper functions {{{

function quit_setup() {
	echo "Usage:"
	echo "  dotfile-setup 'mode'"
	echo "Modes: install & update"
	exit 1
}

function should_install() {
	[ "$_should_install" ]
}

function should_update() {
	[ "$_should_update" ]
}

# }}}

if [ ! $# -eq 1 ]
then quit_setup
fi

case $1 in
	install)
		_should_install=true;;
	update)
		_should_update=true;;
	*)
		quit_setup
esac
shift

# Setup environment {{{

if [ -z "$DOTFILES" ]
then
	echo "Not yet set up. Sourcing zprofile"
	# shellcheck source=../zprofile
	source "$(pwd)/${0%/*}/../zprofile"
fi

cd "$DOTFILES" || exit

# Install homebrew if not available
if ! hash brew &>/dev/null; then
	echo 'Install homebrew before continuing with this setup.'
	#shellcheck disable=SC2016
	echo '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
	exit 1
fi

# put every dotfile in place
if should_install; then
	# Install rcm via brew, if not installed.
	if ! hash rcup &>/dev/null; then
		echo 'Installing rcm to continue with installation'
		brew install thoughtbot/formulae/rcm
	fi
	env RCRC="$DOTFILES/rcrc" rcup
fi

# }}}


# INSTALLATION

# Install brews {{{

echo 'Install Brewfile'
if should_install || should_update; then
	# TODO: do not require brew being installed
	brew bundle install --global
fi

# uninstall git completions as zsh completions are way better!
rm /usr/local/share/zsh/site-functions/_git 2>/dev/null || true

# }}}

# Install gems {{{

echo 'Install gems'
if should_install; then
	# installs ruby version in ~/.ruby-version
	rbenv install --skip-existing
	bundle install
fi
if should_update; then
	bundle update
fi

rbenv rehash

# }}}

# Install npms {{{

echo 'Install npm global'
if should_install; then
	#shellcheck disable=SC2046
	npm install --global $(env cat "$DOTFILES/node_modules")
fi
if should_update; then
	#shellcheck disable=SC2046
	npm update --global $(env cat "$DOTFILES/node_modules")
fi

# }}}

# Install pips {{{

echo 'Install pips'
if should_install; then
	pip3 install -r "$DOTFILES/pip3-requirements"
fi
if should_update; then
	pip3 install -U -r "$DOTFILES/pip3-requirements"
fi

# }}}


# CONFIGURATION

# ALACRITTY {{{

if should_install; then
	# Set font rendering for non retina
	defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
fi

# }}}

# BAT {{{

if should_install; then
	# recompile with theme
	bat cache --build
fi

# }}}

# NVIM {{{

if should_install; then
	mkdir -p "$DOTFILES_CACHE/vim/undodir"
	nvim -u vim/plugins.vim +PlugInstall +qa
	for file in vim/spell/*.add
	do
		nvim "+mkspell! $file" +qa
	done
fi

if should_update; then
	nvim -u vim/plugins.vim +PlugUpgrade +PlugUpdate +qa
fi

# }}}

# TMUX {{{

# install tmux terminal
if should_install; then
	if [[ ! -x  "$DOTFILES_CACHE/tmux/plugins/tpm/tpm" ]]
	then git clone https://github.com/tmux-plugins/tpm "$DOTFILES_CACHE/tmux/plugins/tpm"
	fi
	"$DOTFILES_CACHE"/tmux/plugins/tpm/bin/install_plugins
fi
if should_update; then
	"$DOTFILES_CACHE"/tmux/plugins/tpm/bin/update_plugins all
fi

# }}}

# ZSH {{{

if should_install; then
	mkdir "$HOME/.cache/zsh"
	zsh -c "source $DOTFILES/zinit/zinit.zsh && zinit module build"
fi
if should_update; then
	zsh -c "source $DOTFILES/zinit/zinit.zsh && zinit update"
fi

# }}}

rcup

# vim:set foldmethod=marker:
